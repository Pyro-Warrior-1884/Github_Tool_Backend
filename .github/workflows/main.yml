name: Send Submission to Backend

on:
  push:
    branches:
      - main

jobs:
  submit-changed-code:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout full history
      uses: actions/checkout@v3
      with:
        fetch-depth: 2 

    - name: Extract Commit Info
      id: meta
      run: |
        echo "COMMITTER=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV
        echo "COMMIT_COUNT=$(git rev-list --count HEAD)" >> $GITHUB_ENV

        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
        echo "$CHANGED_FILES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Encode changed files (.py, .cpp, .java)
      run: |
        mkdir -p encoded
        echo "[]" > encoded/files.json

        for FILE in $CHANGED_FILES; do
          if [[ "$FILE" == *.py || "$FILE" == *.cpp || "$FILE" == *.java ]]; then
            if [ -f "$FILE" ]; then
              CODE=$(base64 < "$FILE" | tr -d '\n')
              jq --arg filename "$FILE" --arg content_b64 "$CODE" \
                '. += [{filename: $filename, content_b64: $content_b64}]' \
                encoded/files.json > temp.json && mv temp.json encoded/files.json
            fi
          fi
        done

        echo "üì¶ Final encoded file list:"
        cat encoded/files.json

    - name: Send submission to backend with retries
      run: |
        JSON=$(jq -n \
          --arg name "$COMMITTER" \
          --arg commitCount "$COMMIT_COUNT" \
          --arg timestamp "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
          --argjson files "$(cat encoded/files.json)" \
          '{name: $name, commitCount: $commitCount, timestamp: $timestamp, files: $files}')

        echo "üöÄ Final JSON Payload:"
        echo "$JSON" | jq .

        for i in {1..5}; do
          STATUS=$(curl -s -o response.txt -w "%{http_code}" -X POST https://github-tool-project.onrender.com/webhook \
            -H "Content-Type: application/json" \
            -d "$JSON")

          cat response.txt
          echo "Status: $STATUS"

          if [ "$STATUS" -eq 200 ]; then
            echo "‚úÖ Successfully sent submission!"
            break
          elif [ "$STATUS" -eq 429 ]; then
            echo "‚ö†Ô∏è Rate limited. Retrying in $((2**i)) seconds..."
            sleep $((2**i))
          else
            echo "‚ùå Failed with status $STATUS"
            exit 1
          fi
        done
